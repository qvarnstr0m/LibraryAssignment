@page "/edit-book/{Id:int}"
@using LibraryAssignment.BlazorWASM.Interfaces
@using LibraryAssignment.Data.Models
@using AutoMapper
@using LibraryAssignment.BlazorWASM.DTOs
@inject IBookService BookService
@inject SpinnerService SpinnerService
@inject IMapper Mapper
@inject NavigationManager NavigationManager

<PageTitle>edit book - library.</PageTitle>

<h1 class="text-6xl mb-10">edit book.</h1>

@if (_book != null)
{
    <div class="md:w-1/2 mt-5">
        <form @onsubmit="@OnSubmit">
            <label for="id" class="mb-2 text-lg">id.</label>
            <div class="relative">
                <input @bind="@_book.Id" type="number" id="id" class="mb-2 block p-4 pl-10 text-md border rounded-lg bg-customWhite text-gray-500" readonly/>
            </div>
            <label for="title" class="mb-2 text-lg">title.</label>
            <div class="relative">
                <input @bind="@_book.Title" type="text" id="title" class="mb-2 w-full block p-4 pl-10 text-md border rounded-lg bg-customWhite text-customBlue" required/>
            </div>
            <label for="author" class="mb-2 text-lg">author.</label>
            <div class="relative">
                <input @bind="@_book.Author" type="text" id="author" class="mb-2 w-full block p-4 pl-10 text-md border rounded-lg bg-customWhite text-customBlue" required/>
            </div>
            <label for="description" class="mb-2 text-lg">description.</label>
            <div class="relative">
                <textarea @bind="@_book.Description" type="" id="description" rows="5" class="mb-2 w-full block p-4 pl-10 text-md border rounded-lg bg-customWhite text-customBlue" required></textarea>
            </div>
            <label for="bookCoverFileName" class="mb-2 text-lg">book cover file name.</label>
            <div class="relative">
                <input @bind="@_book.BookCoverFileName" type="text" id="bookCoverFileName" class="mb-2 w-full block p-4 text-md border rounded-lg bg-customWhite text-customBlue" required/>
            </div>
            <div class="flex flex-row items-center mb-5">
                <label for="isavailable" class="text-lg">is available.</label>
                <div class="relative">
                    <input @bind="@_book.IsAvailable" type="checkbox" id="isavailable" class="ml-2 block text-xl bg-customWhite text-customBlue"/>
                </div>
            </div>
            <button type="submit" class="bg-customOrange text-customBlue hover:text-customYellow rounded-lg px-4 py-2">
                Save
            </button>
        </form>

        <button @onclick="ShowDeleteConfirmation" class="bg-customOrange text-customBlue hover:text-customYellow rounded-lg px-4 py-2 mt-5">
            Delete book
        </button>
    </div>
}
else
{
    <h1 class="text-3xl">@_message</h1>
}

@if (_showInfoModal)
{
    <InfoModal Message="@_message" CloseInfoModal="ToggleInfoModal"/>
}

@if (_showChoiceModal)
{
    <ChoiceModal Message="@_message" OnDeleteConfirmation="ProceedWithDelete" CloseModal="ToggleChoiceModal"/>
}

@code {

    [Parameter]
    public int Id { get; set; }

    private string _message = "Loading...";
    private Book? _book;
    private bool deleteBook = false;
    public bool _showInfoModal { get; set; }
    public bool _showChoiceModal { get; set; }

    protected override async Task OnInitializedAsync()
    {
        SpinnerService.Show();
        var result = await BookService.GetBookAsync(Id);

        if (!result.isSuccess)
        {
            _message = result.message;
        }
        else
        {
            _book = result.book;
        }

        SpinnerService.Hide();
    }

    private async Task OnSubmit()
    {
        if (_book.Description.Length <= 0 || _book.Title.Length <= 0 || _book.Author.Length <= 0)
        {
            return;
        }
        SpinnerService.Show();
        var updateBookDto = Mapper.Map<UpdateBookDto>(_book);
        var response = await BookService.UpdateBookAsync(_book.Id, updateBookDto);
        _message = response.message;
        SpinnerService.Hide();
        _showInfoModal = true;
    }

    private void ShowDeleteConfirmation()
    {
        _message = "Are you sure you want to delete this book?";
        _showChoiceModal = true;
    }

    private async Task ProceedWithDelete()
    {
        SpinnerService.Show();
        var response = await BookService.DeleteBookAsync(_book.Id);

        if (response.isSuccess)
        {
            SpinnerService.Hide();
            NavigationManager.NavigateTo("/deleted-book");
        }
        else
        {
            _message = response.message;
            SpinnerService.Hide();
            _showChoiceModal = false;
        }
    }

    private Task ToggleChoiceModal()
    {
        _showChoiceModal = false;
        return Task.CompletedTask;
    }

    private Task ToggleInfoModal()
    {
        _showInfoModal = false;
        return Task.CompletedTask;
    }

}